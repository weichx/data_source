/// <reference path="../src/typing/promise.d.ts" />
import { EventEmitter } from "./event";
import { IAdapter, IRecordStore } from "./interfaces";
import { ICollectionOptions, Collection } from './collection';
export declare class DataSource<T> extends EventEmitter {
    private _adapter;
    private _configPromise;
    private _loadOncePromise;
    private _records;
    private _recordList;
    private _observers;
    _dirtyRecordList: boolean;
    constructor(adapter?: IAdapter<T> | Function, config?: any);
    loadRecords(): Promise<T[]>;
    loadRecordsOnce(): Promise<T[]>;
    addRecord(record: T): Promise<T>;
    getRecord(id: string): Promise<T>;
    setRecord(id: string, record: T): Promise<T>;
    updateRecord(record: T): Promise<T>;
    removeRecord(recordOrId: T | string): Promise<T>;
    addRecordCollection(recordCollection: T[] | IRecordStore<T>): Promise<T[]>;
    getRecordCollection(ids: Array<string>): Promise<T[]>;
    removeRecordCollection(recordCollection: T[] | IRecordStore<T>): Promise<T[]>;
    updateRecordCollection(recordCollection: T[] | IRecordStore<T>): Promise<T[]>;
    getRecordPage(pageSize: number, pageNumber: number, optionalArguments?: any): Promise<T[]>;
    getRecordCount(): Promise<number>;
    query(...args: any[]): Promise<any>;
    action(...args: any[]): Promise<any>;
    clearLocalRecordStore(): void;
    createManagedCollection(options?: ICollectionOptions): Collection;
    manageCollection(collection: Collection): void;
    private _getLocalRecordId(record);
    private _internalAddRecordCollection(recordCollection);
    private _internalRemoveRecordCollection(recordCollection);
    observeRecord(id: string, callback: (record: T) => void): () => void;
    observeRecords(ids: Array<string>, callback: (record: T) => void): () => void;
    awaitRecord(id: string): Promise<T>;
    awaitRecords(ids: Array<string>): Promise<T[]>;
    reset(): void;
    private _flushObservers(id, record);
    _internalAddRecord(addedRecord: T, id: string): T;
    _internalChangeRecord(newRecord: T, oldRecord: T, id: string): T;
    _internalRemoveRecord(removedRecord: T, id: string): T;
    _internalGetRecordList(): T[];
    _internalGetLocalRecordIds(): Array<string>;
    _internalGetLocalRecords(): IRecordStore<T>;
    private static promisify(value);
    private static AddNullRecord;
    private static SetRecordIdRequired;
    private static SetRecordRecordRequired;
    private static RemoveRecordRecordRequired;
    private static RequirePromiseImpl;
    static SetPromiseImplementation(p: typeof Promise): void;
    private static Promise;
    private static beforeResolveCallback;
    private static methodArray;
    private static methodNameArray;
    static SetBeforeResolveCallback(callback: (retnValue: any | any[]) => void): void;
    static ResetBeforeResolve(): void;
}
export { Adapter } from './adapter';
export { ICollectionOptions, Collection } from './collection';
export { IAdapter, IRecordStore } from './interfaces';
